"""README generator for Claude Code Builder documentation."""
from pathlib import Path
from typing import Dict, List, Optional, Any
import json
import re
from datetime import datetime

from ..models.project import ProjectSpec
from ..models.phase import Phase
from ..utils.template_engine import TemplateEngine
# format_code_block not needed - using template engine directly
from ..config.settings import BuilderConfig
from ..__init__ import __version__


class ReadmeGenerator:
    """Generate README documentation for projects."""
    
    def __init__(self, template_engine: Optional[TemplateEngine] = None):
        """Initialize README generator.
        
        Args:
            template_engine: Template engine instance
        """
        self.template_engine = template_engine or TemplateEngine()
        
    def generate_project_readme(
        self,
        project: ProjectSpec,
        output_dir: Path,
        include_badges: bool = True,
        include_toc: bool = True,
        include_examples: bool = True
    ) -> Path:
        """Generate README for a project.
        
        Args:
            project: Project specification
            output_dir: Output directory
            include_badges: Include status badges
            include_toc: Include table of contents
            include_examples: Include usage examples
            
        Returns:
            Path to generated README
        """
        template = self._get_project_template()
        
        # Prepare context
        context = {
            'project': project,
            'version': __version__,
            'generated_at': datetime.now().isoformat(),
            'include_badges': include_badges,
            'include_toc': include_toc,
            'include_examples': include_examples,
            'phase_count': len(project.phases),
            'total_files': sum(len(p.deliverables) for p in project.phases),
            'primary_language': self._detect_primary_language(project),
            'dependencies': self._extract_dependencies(project),
            'features': self._extract_features(project),
            'requirements': self._extract_requirements(project)
        }
        
        # Generate content
        content = self.template_engine.render(template, context)
        
        # Write README
        readme_path = output_dir / 'README.md'
        readme_path.write_text(content)
        
        return readme_path
    
    def generate_builder_readme(self) -> str:
        """Generate README for Claude Code Builder itself.
        
        Returns:
            README content
        """
        template = self._get_builder_template()
        
        context = {
            'version': __version__,
            'python_version': '3.8+',
            'features': [
                'AI-powered project planning and execution',
                'Multi-phase project orchestration',
                'Model Context Protocol (MCP) integration',
                'Intelligent research and documentation',
                'Custom instruction processing',
                'Real-time progress monitoring',
                'Comprehensive validation and testing',
                'Rich terminal UI with interactive menus',
                'Plugin system for extensibility',
                'Multiple configuration formats support'
            ],
            'commands': self._get_cli_commands(),
            'installation': self._get_installation_instructions(),
            'quick_start': self._get_quick_start_guide(),
            'configuration': self._get_configuration_guide(),
            'plugins': self._get_plugin_guide(),
            'examples': self._get_example_projects()
        }
        
        return self.template_engine.render(template, context)
    
    def _get_project_template(self) -> str:
        """Get project README template.
        
        Returns:
            Template string
        """
        return '''# {{ project.name }}

{% if include_badges %}
![Version](https://img.shields.io/badge/version-{{ project.version | default("1.0.0") }}-blue)
![Language](https://img.shields.io/badge/language-{{ primary_language }}-green)
![Phases](https://img.shields.io/badge/phases-{{ phase_count }}-orange)
![Files](https://img.shields.io/badge/files-{{ total_files }}-purple)
{% endif %}

{{ project.description }}

*Generated by Claude Code Builder v{{ version }} on {{ generated_at }}*

{% if include_toc %}
## Table of Contents

- [Overview](#overview)
- [Features](#features)
- [Requirements](#requirements)
- [Installation](#installation)
- [Usage](#usage)
{% if include_examples %}
- [Examples](#examples)
{% endif %}
- [Project Structure](#project-structure)
- [Development](#development)
- [License](#license)
{% endif %}

## Overview

{{ project.overview | default(project.description) }}

## Features

{% for feature in features %}
- {{ feature }}
{% endfor %}

## Requirements

{% for req in requirements %}
- {{ req }}
{% endfor %}

## Installation

```bash
# Clone the repository
git clone {{ project.repository | default("https://github.com/username/" + project.name) }}
cd {{ project.name }}

# Install dependencies
{% if primary_language == "Python" %}
pip install -r requirements.txt
{% elif primary_language == "JavaScript" %}
npm install
{% elif primary_language == "Go" %}
go mod download
{% else %}
# Install dependencies as per project requirements
{% endif %}
```

## Usage

```bash
{% if project.cli_name %}
# Run the CLI
{{ project.cli_name }} --help
{% else %}
# Run the application
{% if primary_language == "Python" %}
python -m {{ project.name.replace("-", "_") }}
{% elif primary_language == "JavaScript" %}
npm start
{% elif primary_language == "Go" %}
go run main.go
{% else %}
# Run as per project setup
{% endif %}
{% endif %}
```

{% if include_examples %}
## Examples

### Basic Usage

```{{ primary_language | lower }}
{{ project.basic_example | default("# Example code here") }}
```

### Advanced Usage

```{{ primary_language | lower }}
{{ project.advanced_example | default("# Advanced example here") }}
```
{% endif %}

## Project Structure

```
{{ project.name }}/
{% for phase in project.phases %}
├── {{ phase.name }}/
{% for deliverable in phase.deliverables[:3] %}
│   ├── {{ deliverable }}
{% endfor %}
{% if phase.deliverables | length > 3 %}
│   └── ... ({{ phase.deliverables | length - 3 }} more files)
{% endif %}
{% endfor %}
├── README.md
└── requirements.txt
```

## Development

### Build Phases

This project was built in {{ phase_count }} phases:

{% for phase in project.phases %}
{{ loop.index }}. **{{ phase.name }}** - {{ phase.description }}
   - Files: {{ phase.deliverables | length }}
   - Key components: {{ phase.key_components | join(", ") | default("Various modules") }}
{% endfor %}

### Testing

```bash
{% if primary_language == "Python" %}
# Run tests
pytest

# Run with coverage
pytest --cov={{ project.name.replace("-", "_") }}
{% elif primary_language == "JavaScript" %}
# Run tests
npm test

# Run with coverage
npm run test:coverage
{% else %}
# Run project tests
make test
{% endif %}
```

## License

{{ project.license | default("MIT License - see LICENSE file for details") }}

---

Built with ❤️ using [Claude Code Builder](https://github.com/yourusername/claude-code-builder)
'''
    
    def _get_builder_template(self) -> str:
        """Get Claude Code Builder README template.
        
        Returns:
            Template string
        """
        return '''# Claude Code Builder

![Version](https://img.shields.io/badge/version-{{ version }}-blue)
![Python](https://img.shields.io/badge/python-{{ python_version }}-green)
![License](https://img.shields.io/badge/license-MIT-orange)

AI-powered autonomous project builder that transforms markdown specifications into complete, production-ready software projects.

## Features

{% for feature in features %}
- {{ feature }}
{% endfor %}

## Installation

{{ installation }}

## Quick Start

{{ quick_start }}

## Commands

{% for cmd in commands %}
### {{ cmd.name }}

{{ cmd.description }}

```bash
{{ cmd.usage }}
```

{% if cmd.options %}
Options:
{% for opt in cmd.options %}
- `{{ opt.flag }}`: {{ opt.description }}
{% endfor %}
{% endif %}

{% endfor %}

## Configuration

{{ configuration }}

## Plugin Development

{{ plugins }}

## Examples

{% for example in examples %}
### {{ example.name }}

{{ example.description }}

```bash
{{ example.command }}
```

{% endfor %}

## Development

### Project Structure

```
claude-code-builder/
├── claude_code_builder/
│   ├── ai/              # AI planning and orchestration
│   ├── cli/             # Command-line interface
│   ├── config/          # Configuration management
│   ├── docs/            # Documentation generators
│   ├── examples/        # Example projects
│   ├── execution/       # Project execution engine
│   ├── instructions/    # Custom instruction processing
│   ├── logging/         # Logging utilities
│   ├── mcp/             # MCP server integration
│   ├── memory/          # Memory and context management
│   ├── models/          # Data models
│   ├── monitoring/      # Real-time monitoring
│   ├── research/        # Research agent system
│   ├── sdk/             # Claude Code SDK integration
│   ├── testing/         # Testing framework
│   ├── ui/              # Terminal UI components
│   ├── utils/           # Utility functions
│   └── validation/      # Validation and quality checks
├── tests/               # Test suite
├── docs/                # Documentation
└── examples/            # Example specifications
```

### Contributing

1. Fork the repository
2. Create a feature branch (`git checkout -b feature/amazing-feature`)
3. Commit your changes (`git commit -m 'Add amazing feature'`)
4. Push to the branch (`git push origin feature/amazing-feature`)
5. Open a Pull Request

### Testing

```bash
# Run all tests
pytest

# Run with coverage
pytest --cov=claude_code_builder

# Run specific test
pytest tests/test_ai_planner.py
```

## License

MIT License - see [LICENSE](LICENSE) file for details.

## Acknowledgments

- Built with [Anthropic Claude API](https://www.anthropic.com)
- Uses [Model Context Protocol](https://github.com/anthropics/model-context-protocol)
- Terminal UI powered by [Rich](https://github.com/Textualize/rich)

---

**Note**: This tool requires an Anthropic API key for AI-powered features.
'''
    
    def _detect_primary_language(self, project: ProjectSpec) -> str:
        """Detect primary programming language.
        
        Args:
            project: Project specification
            
        Returns:
            Primary language name
        """
        # Check explicit language
        if hasattr(project, 'language'):
            return project.language
        
        # Analyze file extensions
        extensions = {}
        for phase in project.phases:
            for file in phase.deliverables:
                ext = Path(file).suffix.lower()
                extensions[ext] = extensions.get(ext, 0) + 1
        
        # Map extensions to languages
        lang_map = {
            '.py': 'Python',
            '.js': 'JavaScript',
            '.ts': 'TypeScript',
            '.go': 'Go',
            '.rs': 'Rust',
            '.java': 'Java',
            '.cpp': 'C++',
            '.c': 'C',
            '.rb': 'Ruby',
            '.php': 'PHP'
        }
        
        # Find most common language
        max_count = 0
        primary_lang = 'Unknown'
        
        for ext, count in extensions.items():
            if ext in lang_map and count > max_count:
                max_count = count
                primary_lang = lang_map[ext]
        
        return primary_lang
    
    def _extract_dependencies(self, project: ProjectSpec) -> List[str]:
        """Extract project dependencies.
        
        Args:
            project: Project specification
            
        Returns:
            List of dependencies
        """
        deps = []
        
        # Check for explicit dependencies
        if hasattr(project, 'dependencies'):
            deps.extend(project.dependencies)
        
        # Extract from requirements
        if hasattr(project, 'requirements'):
            for req in project.requirements:
                if 'package' in req.lower() or 'library' in req.lower():
                    deps.append(req)
        
        # Add common dependencies based on features
        if any('api' in str(p).lower() for p in project.phases):
            deps.append('REST API framework')
        if any('database' in str(p).lower() for p in project.phases):
            deps.append('Database driver')
        if any('test' in str(p).lower() for p in project.phases):
            deps.append('Testing framework')
        
        return list(set(deps)) or ['See requirements.txt or package.json']
    
    def _extract_features(self, project: ProjectSpec) -> List[str]:
        """Extract project features.
        
        Args:
            project: Project specification
            
        Returns:
            List of features
        """
        features = []
        
        # Check explicit features
        if hasattr(project, 'features'):
            features.extend(project.features)
        
        # Extract from phases
        for phase in project.phases:
            if phase.description:
                features.append(phase.description)
        
        # Add common features based on analysis
        phase_names = [p.name.lower() for p in project.phases]
        
        if any('api' in name for name in phase_names):
            features.append('RESTful API endpoints')
        if any('auth' in name for name in phase_names):
            features.append('Authentication and authorization')
        if any('database' in name or 'data' in name for name in phase_names):
            features.append('Data persistence layer')
        if any('test' in name for name in phase_names):
            features.append('Comprehensive test coverage')
        if any('ui' in name or 'frontend' in name for name in phase_names):
            features.append('User interface components')
        
        return list(set(features))[:10]  # Limit to 10 features
    
    def _extract_requirements(self, project: ProjectSpec) -> List[str]:
        """Extract project requirements.
        
        Args:
            project: Project specification
            
        Returns:
            List of requirements
        """
        reqs = []
        
        # Language-specific requirements
        lang = self._detect_primary_language(project)
        if lang == 'Python':
            reqs.append('Python 3.8 or higher')
        elif lang == 'JavaScript':
            reqs.append('Node.js 14.x or higher')
        elif lang == 'Go':
            reqs.append('Go 1.19 or higher')
        elif lang == 'Rust':
            reqs.append('Rust 1.70 or higher')
        
        # Check explicit requirements
        if hasattr(project, 'requirements'):
            if isinstance(project.requirements, list):
                reqs.extend(project.requirements)
            elif isinstance(project.requirements, dict):
                reqs.extend(project.requirements.get('system', []))
        
        # Add common requirements
        if any('docker' in str(p).lower() for p in project.phases):
            reqs.append('Docker and Docker Compose')
        if any('database' in str(p).lower() for p in project.phases):
            reqs.append('Database server (PostgreSQL/MySQL/MongoDB)')
        
        return reqs or ['See project documentation']
    
    def _get_cli_commands(self) -> List[Dict[str, Any]]:
        """Get CLI command documentation.
        
        Returns:
            List of command info
        """
        return [
            {
                'name': 'build',
                'description': 'Build a project from markdown specification',
                'usage': 'claude-code-builder build project.md [--output-dir ./output]',
                'options': [
                    {'flag': '--output-dir', 'description': 'Output directory for generated project'},
                    {'flag': '--phases', 'description': 'Number of phases to execute'},
                    {'flag': '--no-research', 'description': 'Skip research phase'},
                    {'flag': '--dry-run', 'description': 'Show plan without building'}
                ]
            },
            {
                'name': 'plan',
                'description': 'Generate project plan without building',
                'usage': 'claude-code-builder plan project.md [--output plan.json]',
                'options': [
                    {'flag': '--output', 'description': 'Output file for plan'},
                    {'flag': '--format', 'description': 'Output format (json/yaml/markdown)'}
                ]
            },
            {
                'name': 'resume',
                'description': 'Resume interrupted build from checkpoint',
                'usage': 'claude-code-builder resume [--checkpoint latest]',
                'options': [
                    {'flag': '--checkpoint', 'description': 'Checkpoint to resume from'},
                    {'flag': '--project-dir', 'description': 'Project directory'}
                ]
            },
            {
                'name': 'validate',
                'description': 'Validate project specification',
                'usage': 'claude-code-builder validate project.md',
                'options': [
                    {'flag': '--strict', 'description': 'Enable strict validation'}
                ]
            },
            {
                'name': 'mcp',
                'description': 'Manage MCP servers',
                'usage': 'claude-code-builder mcp [list|install|discover]',
                'options': []
            },
            {
                'name': 'plugin',
                'description': 'Manage plugins',
                'usage': 'claude-code-builder plugin [list|install]',
                'options': []
            }
        ]
    
    def _get_installation_instructions(self) -> str:
        """Get installation instructions.
        
        Returns:
            Installation guide
        """
        return '''### From PyPI

```bash
pip install claude-code-builder
```

### From Source

```bash
git clone https://github.com/yourusername/claude-code-builder.git
cd claude-code-builder
pip install -e .
```

### With Optional Dependencies

```bash
# Full installation with all features
pip install claude-code-builder[all]

# With specific features
pip install claude-code-builder[mcp,research]
```'''
    
    def _get_quick_start_guide(self) -> str:
        """Get quick start guide.
        
        Returns:
            Quick start instructions
        """
        return '''1. **Set up API key**:
   ```bash
   export ANTHROPIC_API_KEY="your-api-key"
   ```

2. **Create project specification** (`myproject.md`):
   ```markdown
   # My Awesome Project
   
   A web application for task management.
   
   ## Features
   - User authentication
   - Task CRUD operations
   - Real-time updates
   ```

3. **Build the project**:
   ```bash
   claude-code-builder build myproject.md --output-dir ./myproject
   ```

4. **Navigate to your project**:
   ```bash
   cd myproject
   ls -la
   ```'''
    
    def _get_configuration_guide(self) -> str:
        """Get configuration guide.
        
        Returns:
            Configuration instructions
        """
        return '''Claude Code Builder supports multiple configuration formats:

### Configuration File

Create `.claude-code-builder.yaml`:

```yaml
api_key: ${ANTHROPIC_API_KEY}
model: claude-3-sonnet-20240229
max_tokens: 100000

mcp_servers:
  filesystem:
    enabled: true
    path: /usr/local/bin/mcp-filesystem
  github:
    enabled: true
    token: ${GITHUB_TOKEN}

research:
  enabled: true
  max_sources: 10

ui:
  rich: true
  progress_style: "blue"
```

### Environment Variables

```bash
export CLAUDE_CODE_BUILDER_API_KEY="your-key"
export CLAUDE_CODE_BUILDER_MODEL="claude-3-sonnet-20240229"
export CLAUDE_CODE_BUILDER_MAX_TOKENS="100000"
```

### Command Line

```bash
claude-code-builder build project.md \\
  --api-key "your-key" \\
  --model "claude-3-sonnet-20240229" \\
  --max-tokens 100000
```'''
    
    def _get_plugin_guide(self) -> str:
        """Get plugin development guide.
        
        Returns:
            Plugin guide
        """
        return '''### Creating a Plugin

```python
# myplugin.py
from claude_code_builder.cli.plugins import Plugin, PluginHook

class MyPlugin(Plugin):
    """Example plugin for Claude Code Builder."""
    
    name = "myplugin"
    version = "1.0.0"
    
    def on_pre_build(self, context):
        """Called before build starts."""
        print("Starting build...")
        
    def on_post_phase(self, context):
        """Called after each phase."""
        phase = context['phase']
        print(f"Completed phase: {phase.name}")
```

### Installing Plugins

```bash
# Install from file
claude-code-builder plugin install ./myplugin.py

# Install from package
claude-code-builder plugin install claude-builder-plugin-name
```

### Using Plugins

```yaml
# .claude-code-builder.yaml
plugins:
  - myplugin
  - another-plugin

plugin_config:
  myplugin:
    setting1: value1
```'''
    
    def _get_example_projects(self) -> List[Dict[str, str]]:
        """Get example project descriptions.
        
        Returns:
            List of example projects
        """
        return [
            {
                'name': 'Simple Web API',
                'description': 'Build a RESTful API with authentication',
                'command': 'claude-code-builder build examples/web-api.md'
            },
            {
                'name': 'CLI Tool',
                'description': 'Create a command-line application',
                'command': 'claude-code-builder build examples/cli-tool.md'
            },
            {
                'name': 'Full Stack App',
                'description': 'Build a complete web application with frontend and backend',
                'command': 'claude-code-builder build examples/full-stack.md --phases 12'
            },
            {
                'name': 'Microservice',
                'description': 'Create a containerized microservice',
                'command': 'claude-code-builder build examples/microservice.md'
            }
        ]